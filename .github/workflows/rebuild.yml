name: build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      device:
        description: 'select device to build'
        default: 'r2s'
        required: true
      branch:
        description: 'select openwrt branch'
        default: 'master'
        required: true
      mclean:
        description: 'make clean if true'
        default: 'false'
        required: true
      pclean:
        description: 'make package/clean if true'
        default: 'false'
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEVICE: ${{ github.event.inputs.device }}
  BRANCH: ${{ github.event.inputs.branch }}
  TZ: Asia/Shanghai

jobs:

  build_packages:
    name: Download ${{ github.event.inputs.device }} packages
    runs-on: ubuntu-20.04
    if: github.repository_owner=='Ahlaman'

    steps:

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          nohup sh -c '
          sudo apt update;
          sudo apt -y --no-upgrade --no-install-recommends install pv jq \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk
          sudo sysctl vm.swappiness=0
          ' &

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Checkout
        run: |
          cd
          curl -sL https://raw.githubusercontent.com/klever1988/nanopi-openwrt/zstd-bin/zstd | sudo tee /usr/bin/zstd > /dev/null
          for i in {1..20}
          do
            curl -sL --fail https://github.com/${{github.repository_owner}}/sshactions/releases/download/cache/lede.$DEVICE.img.zst.0$i || break
          done | zstdmt -d -o lede.img || (truncate -s 33g lede.img && mkfs.btrfs -M lede.img)
          LOOP_DEVICE=$(losetup -f) && echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_ENV
          sudo losetup -P --direct-io $LOOP_DEVICE lede.img
          mkdir lede && sudo mount -o nossd,compress=zstd $LOOP_DEVICE lede
          if [ -d 'lede/.git' ]; then
          cd ~/lede && rm -f zerospace && git config --local user.email "action@github.com" && git config --local user.name "GitHub Action"
          git fetch && git reset --hard origin/$BRANCH && git clean -df
          else
          sudo chown $USER:$(id -gn) lede && git clone -b $BRANCH --single-branch https://github.com/coolsnowwolf/lede lede
          fi

      - name: Update feeds and packages
        run: |
          cd ~/lede
          if [ -d 'feeds' ]; then
            pushd feeds/packages; git restore .; popd
            pushd feeds/luci; git restore .; popd
            pushd feeds/routing; git restore .; popd
            pushd feeds/telephony; git restore .; popd
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          . $GITHUB_WORKSPACE/scripts/merge_packages.sh
          . $GITHUB_WORKSPACE/scripts/patches.sh
          cd
          svn export https://github.com/openwrt/luci/branches/master luci
          pushd luci
          ls -d */ | xargs -n1 -i diff -q {} ../lede/feeds/luci/{} | grep Only | grep lede | grep -E applications\|themes | awk '{print $4}' | xargs -n1 -i echo CONFIG_PACKAGE_{}=m > ~/lede/more_luci.txt
          popd

      - name: Custom configure file
        run: |
          cd ~/lede && rm -rf tmp/
          cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | sed 's/\(CONFIG_PACKAGE_luci-app-[^A-Z]*=\)y/\1m/' > .config
          find package/ -type d -name luci-app-* | rev | cut -d'/' -f1 | rev | xargs -n1 -i echo CONFIG_PACKAGE_{}=m >> .config
          cat $GITHUB_WORKSPACE/extra_packages.seed >> .config
          cat more_luci.txt >> .config
          make defconfig && sed -i -E 's/# (CONFIG_.*_COMPRESS_UPX) is not set/\1=y/' .config && make defconfig
          cat .config

      - name: Clean build cache
        if: ${{ github.event.inputs.mclean == 'true' }}
        run: |
          cd ~/lede
          df -h .
          make clean
          df -h .
          
      - name: Build and deploy packages
        run: |
          ulimit -SHn 65000
          cd ~/lede
          while true; do make download -j && break || true; done
          
          echo -e "$(nproc) thread compile"
          
          createdAt=$(gh -R ${GITHUB_REPOSITORY}  run list --json databaseId,createdAt --jq ".[]|select(.databaseId==${{ github.run_id }})|.createdAt")
          echo "createdAt=$createdAt" >> $GITHUB_ENV
          set -x
          mkdir -p env/
          touch env/toolchain.hash
          CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain) 
          CACHE_HASH=$(cat env/toolchain.hash)
          if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
            echo 'star compile tools'
            time make tools/compile -j$[`nproc`+1] || make tools/compile -j1 V=s
            # tools 编译的时候和 toolchain 貌似会一起编译
            time make toolchain/compile -j$[`nproc`+1] || make toolchain/compile -j1 V=s
            echo $CURRENT_HASH > env/toolchain.hash
          fi 
          make buildinfo
          make diffconfig buildversion feedsversion
          time make target/compile -j$[`nproc`+1] IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j1 V=s IGNORE_ERRORS=1
          usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
          # 6小时超时，减去上传 cache 预留的 22 分钟后的时间作为 timeout 时间
          reserved_time=30
          # 每种缓存方式时间预留不一样
          timeoutSec=$(( 6*60*60 - ${reserved_time}*60 - $usedSec  )) 
          time timeout $timeoutSec make package/compile -j$[`nproc`+1] IGNORE_ERRORS=1 |& tee -a /tmp/build.log
          if ! grep -qw Terminated /tmp/build.log;then
            usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
            if grep -qw 're-run make' /tmp/build.log;then
              # 小于 5 小时构建完，此刻单独构建失败的
              if [ $usedSec -lt $((47*60*6)) ];then
                timeoutSec=$(( 6*60*60 - ${reserved_time}*60 - $usedSec  )) 
                echo 'failed: try to V=s'
                time timeout $timeoutSec make package/compile -j1 V=s IGNORE_ERRORS=1 || make package/index
              fi
            else
              time make package/install
              timeoutSec=$(( 6*60*60 - ${reserved_time}*60 - $usedSec  ))
              if [ $timeoutSec -gt 0 ];then
                command="timeout $timeoutSec"
              fi
              time make package/index || true
              time $command make target/install || make target/install -j1 V=s
              make json_overview_image_info
              make checksum
            fi
          else
              time make package/index || true
          fi
          set +x

          if [ -e ~/lede/bin/targets/*/*/*imagebuilder*xz ]; then
            echo "success build"
            mv `ls ~/lede/bin/targets/*/*/*imagebuilder*xz` ~/ib-$DEVICE.tar.xz
          fi

          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          df -i
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin
          
      - name: retry with V=s in failed packages
        if: (!cancelled())
        run: |
          cd ~/lede
          # 编译时间很早完成的话，make -v 看下 ERROR: package/feeds/routing/cjdns failed to build. 的编译错误信息
          if [ -n "${{ secrets.gh_token }}" ];then
            usedSec=$(( `date +%s` - `date -d "$createdAt" +%s`  ))
            # 小于 5 小时构建完，此刻单独构建失败的
            if [ $usedSec -lt $((4*60*60)) ];then
              grep -Po 'ERROR:\s+\K\S+' /tmp/build.log || true
              echo '-------------分割线-----------'
              for pkg in `grep -Po 'ERROR:\s+\K\S+' /tmp/build.log`;do
                  echo "开始单独尝试 make $pkg/compile V=s 编译查看详细信息"
                  make $pkg/compile V=s || true
              done
            fi
          fi  

      - name: Clean build cache
        if: ${{ github.event.inputs.pclean == 'true' }}
        run: |
          cd ~/lede
          df -h .
          make package/clean
          df -h .
          
      - name: Prepare artifact
        run: |
          cd
          mkdir -p ./artifact/buildinfo
          cd ~/lede
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ../artifact/buildinfo/
          cp -rf .config ../artifact/buildinfo/
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV
          rm -rf bin tmp
          cd ..
          mv artifact $GITHUB_WORKSPACE
          
      - name: Upload buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/
          
      - name: Save imagebuilder
        run: |
          cd
          export AUTH="Authorization: token ${{ secrets.SEC_TOKEN }}"
          export cache_path='github.com/repos/${{github.repository_owner}}/sshactions/releases'
          export cache_repo_id='latest'
          if [ -e ~/ib-$DEVICE.tar.xz ]; then
            echo '上传imagebuilder'
            while true; do
            ret=$(curl -sH "$AUTH" "https://api.$cache_path/tags/cache")
            echo $ret | jq -r '.assets[] | select(.name == "ib-'$DEVICE'.tar.xz").id' | \
            xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
            #上传
            ls ~/ib-$DEVICE.tar.xz | parallel --wc 'while true; do curl -T {} -H "$AUTH" -H "Content-Type: application/octet-stream" "https://uploads.$cache_path/$cache_repo_id/assets?name={}" && break || true; done'
            done
            rm -rf ~/ib-$DEVICE.tar.xz
          fi

      - name: Clean space for upload cache
        continue-on-error: true
        run: |
          sync
          nohup sh -c '
          echo "Listing 100 largest packages"
          sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
          df -h
          echo "Removing large packages"
          sudo apt-get remove -y '^ghc-8.*' || true
          sudo apt-get remove -y '^dotnet-.*' || true
          sudo apt-get remove -y '^llvm-.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel || true
          sudo apt-get autoremove -y || true
          sudo apt-get clean || true
          df -h
          df -i
          ' &

      - name: Save cache state
        run: |
          cd
          sleep 1
          sudo mount -o remount,compress=no,nodatacow,nodatasum lede
          pv /dev/zero > lede/zerospace || true; sync; rm -f zerospace
          sleep 20
          sync
          if command -v lsof 1>/dev/null;then
            echo '检测挂载点是否有进程占用'
            sudo lsof lede &> /tmp/mount_pid.info || true
            awk '+$2>0&&!a[$2]++{print $2}' /tmp/mount_pid.info | sudo xargs -r -n1 kill -9 
          fi
          sudo umount -f lede
          sleep 2
          sudo losetup -l -O NAME -n | grep -Eqw $LOOP_DEVICE && sudo losetup -d $LOOP_DEVICE
          sync

          zstdmt -c --long lede.img | split --numeric=1 -b 2000m - lede.$DEVICE.img.zst.
          echo '上传编译cache: lede.img'
          while true; do
          ret=$(curl -sH "$AUTH" "https://api.$cache_path/tags/cache")
          echo $ret | jq -r '.assets[] | select(.name | contains ("'$DEVICE'.img")).id' | \
          xargs -n1 -i curl -X DELETE -H "$AUTH" "https://api.$cache_path/assets/{}"
          #上传
          ls *img.zst* | parallel --wc 'while true; do curl -T {} -H "$AUTH" -H "Content-Type: application/octet-stream" "https://uploads.$cache_path/$cache_repo_id/assets?name={}" && break || true; done'
          set +e
          #成功上传才退出循环
          for i in {1..20}; do curl -sL --fail https://github.com/${{github.repository_owner}}/sshactions/releases/download/cache/lede.$DEVICE.img.zst.0$i || break; done | zstdmt -d -o /dev/null
          if [ $? -eq 0 ]; then break; fi
          done
          set -e

  generate_firmware:
    needs: build_packages
    name: Generate ${{ github.event.inputs.device }} firmware
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          
      - name: Generate firmware
        run: |
          sudo apt update && sudo apt install qemu-utils
          sudo sysctl vm.swappiness=0
          ulimit -SHn 65000
          curl -L https://github.com/${{github.repository_owner}}/sshactions/releases/download/cache/ib-$DEVICE.tar.xz | tar -Jxvf -
          #cat ~/ib-$DEVICE.tar.xz | tar -Jxvf -
          set -x
          mv *imagebuilder* ib && cd ib
          . $GITHUB_WORKSPACE/scripts/merge_files.sh
          sed -i '/local/d;s/#//' files/etc/opkg/distfeeds.conf
          sed -i 's/luci-app-[^ ]*//g' include/target.mk $(find target/ -name Makefile)
          sed -i 's/$(OPKG) install $(BUILD_PACKAGES)/$(OPKG) install --force-overwrite $(BUILD_PACKAGES)/' Makefile
          
          mkdir -p $GITHUB_WORKSPACE/release
          tar -cvf ipks.tar packages/*.ipk
          mv ipks.tar $GITHUB_WORKSPACE/release/
          ls packages/*.ipk | xargs -n1 basename > package.files
          
          PACKAGES=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | grep CONFIG_PACKAGE | grep -v CONFIG_PACKAGE_luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs -n1 -i grep -o {} package.files | sort -u | xargs echo)
          PACKAGES="$PACKAGES `grep -o luci-i18n-opkg-zh-cn package.files || true`"
          LUCI=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | grep CONFIG_PACKAGE_luci-app | grep -v docker | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs -n1 -i grep -o {} package.files | sort -u | xargs echo)
          LP=$(echo $LUCI | sed 's/-app-/-i18n-/g;s/ /\n/g' | xargs -n1 -i grep -o {}-zh-cn package.files | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"

          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE.img.gz > $DEVICE.img.gz.md5
          gzip -dc $DEVICE.img.gz | md5sum | sed "s/-/$DEVICE.img/" > $DEVICE.img.md5
          echo "strDate=$(TZ=UTC-8 date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "strDevice=$(echo $DEVICE | awk '{print toupper($0)}')" >> $GITHUB_ENV

          if [[ ${{ github.event.inputs.device }} == *"r1s"* ]]; then
            exit 0
          fi
          cd $GITHUB_WORKSPACE/ib
          rm -rf bin/
          LUCI=$(cat $GITHUB_WORKSPACE/$DEVICE.config.seed $GITHUB_WORKSPACE/common.seed | grep CONFIG_PACKAGE_luci-app | sed 's/CONFIG_PACKAGE_//;s/=y//' | xargs -n1 -i grep -o {} package.files | sort -u | xargs echo)
          LP=$(echo $LUCI | sed 's/-app-/-i18n-/g;s/ /\n/g' | xargs -n1 -i grep -o {}-zh-cn package.files | xargs echo | xargs echo)
          make image PACKAGES="$PACKAGES $LUCI $LP luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn" FILES="files"
          mv $(ls -1 ./bin/targets/*/*/*img.gz | head -1) $GITHUB_WORKSPACE/release/$DEVICE-with-docker.img.gz
          cd $GITHUB_WORKSPACE/release/ && md5sum $DEVICE-with-docker.img.gz > $DEVICE-with-docker.img.gz.md5
          gzip -dc $DEVICE-with-docker.img.gz | md5sum | sed "s/-/$DEVICE-with-docker.img/" > $DEVICE-with-docker.img.md5

      - name: Upload release asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./release/*
          tag: ${{env.strDate}}
          file_glob: true
          overwrite: true
          release_name: ${{env.strDate}}
